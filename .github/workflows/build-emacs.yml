name: Build Emacs for Windows

# Events that trigger the workflow
on:
  # 1. Allows manually running the workflow from the GitHub "Actions" tab
  workflow_dispatch:

  # 2. Runs the workflow every Monday at 02:00 UTC
  schedule:
    - cron: '0 2 * * 1'

jobs:
  build:
    runs-on: ubuntu-latest # Use a Linux runner for easier dependency management

    steps:
      # 1. Checkout your repository (if you have local scripts)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Install Emacs build dependencies and jq
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake texinfo \
            libgnutls28-dev libncurses-dev libjansson-dev \
            libjpeg-dev libpng-dev libtiff-dev libgif-dev \
            libxpm-dev libxml2-dev \
            libtree-sitter-dev librsvg2-dev libmagickwand-dev \
            xz-utils mingw-w64 \
            jq # Install jq for JSON parsing

      # 3. Install the latest version of Zig
      - name: Install Zig (latest stable)
        run: |
          curl -s https://ziglang.org/download/index.json > zig-versions.json
          LATEST_ZIG_VERSION=$(jq -r 'keys | .[]' zig-versions.json | grep -v 'master' | sort -V | tail -n 1)
          echo "Latest Zig version is $LATEST_ZIG_VERSION"
          TARBALL_URL=$(jq -r --arg V "$LATEST_ZIG_VERSION" '.[$V]."x86_64-linux".tarball' zig-versions.json)
          wget "$TARBALL_URL"
          TARBALL_NAME=$(basename "$TARBALL_URL")
          tar -xf "$TARBALL_NAME"
          EXTRACTED_DIR_NAME=$(basename "$TARBALL_NAME" .tar.xz)
          echo "$(pwd)/$EXTRACTED_DIR_NAME" >> $GITHUB_PATH

      # 4. Determine the latest Emacs release tag
      - name: Determine Latest Emacs Tag
        id: get_tag
        run: |
          ALL_TAGS=$(git ls-remote --tags --ref git://git.savannah.gnu.org/emacs.git \
            | grep -o 'refs/tags/emacs-[0-9.]*$' \
            | sed 's|refs/tags/||')

          LATEST_STABLE_TAG=$(echo "$ALL_TAGS" \
            | grep -v -E '\.([5-9][0-9]|[1-9][0-9]{2,})$' \
            | sort -V \
            | tail -n 1)

          LATEST_OVERALL_TAG=$(echo "$ALL_TAGS" \
            | sort -V \
            | tail -n 1)

          LATEST_TAG=$(printf "%s\n%s" "$LATEST_STABLE_TAG" "$LATEST_OVERALL_TAG" \
            | sort -V \
            | tail -n 1)

          echo "Latest stable tag is $LATEST_STABLE_TAG"
          echo "Latest overall tag is $LATEST_OVERALL_TAG"
          echo "Selected latest tag is $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # 5. Clone the specific Emacs release tag
      - name: Clone Emacs source (latest tag)
        run: |
          git clone --depth 1 --branch ${{ env.LATEST_TAG }} git://git.savannah.gnu.org/emacs.git

      # 6. Build Emacs
      - name: Build Emacs
        working-directory: ./emacs
        run: |
          export TARGET="x86_64-w64-mingw32"
          ./autogen.sh
          ./configure --host=$TARGET \
                      CC="zig cc -target $TARGET" \
                      CXX="zig c++ -target $TARGET" \
                      --without-dbus \
                      --without-ncurses \
                      --with-native-compilation=aot \
                      --with-tree-sitter \
                      --with-gif \
                      --with-png \
                      --with-jpeg \
                      --with-rsvg \
                      --with-tiff \
                      --with-imagemagick
          make -j$(nproc)
          make install-strip DESTDIR=../../emacs-win-dist

      # 7. Package the build into a versioned zip file
      - name: Package the build
        run: |
          zip -r emacs-windows-${{ env.LATEST_TAG }}.zip ./emacs-win-dist

      # 8. Upload the versioned build artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: emacs-windows-build-${{ env.LATEST_TAG }}
          path: emacs-windows-${{ env.LATEST_TAG }}.zip

      # 9. Clean up old artifacts to stay within storage limits
      - name: Clean up old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          # Keep only the 2 most recent artifacts
          skip-recent: 2
